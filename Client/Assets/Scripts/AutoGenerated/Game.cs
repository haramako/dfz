// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using System.Collections.Generic;
using pb = global::Google.ProtocolBuffers;
using scg = global::System.Collections.Generic;
namespace Game {

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Game {

  }
  #region Enums
  public enum CharacterType {
    Player = 0,
    Enemy = 1,
  }

  #endregion

  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Character : pb.Message {
    private Character() { }
    public static Character CreateInstance() { var obj = new Character(); obj.Finish(); return obj; }
    public static Character CreateEmpty() { return new Character(); }
    private static readonly Character defaultInstance = new Character();
    public static Character DefaultInstance {
      get { return defaultInstance; }
    }

    public int Id;

    public int Hp;

    public int X;

    public int Y;

    public int SavedDir;

    public global::Game.CharacterType Type = global::Game.CharacterType.Player;

    public string Name = "";

    public int Team;

    public int AtlasId;

    public int Attack;

    public int Defense;

    public int MaxHp;

    public int Move;

    public int JumpHeight;

    public int Attribute;

    public int Race;

    public int Speed;

    public bool Active;

    public global::Master.Skill AttackSkill;

    public List<global::Master.Skill> Skills;

    public List<global::Master.Ability> Abilities;

    #region Lite runtime methods
    #endregion

    public override void WriteTo(pb::CodedOutputStream output) {
      CalcSerializedSize();
      if (Id != 0) {
        output.WriteInt32(1, Id);
      }
      if (Hp != 0) {
        output.WriteInt32(2, Hp);
      }
      if (Attack != 0) {
        output.WriteInt32(3, Attack);
      }
      if (Defense != 0) {
        output.WriteInt32(4, Defense);
      }
      if (Move != 0) {
        output.WriteInt32(5, Move);
      }
      if (JumpHeight != 0) {
        output.WriteInt32(6, JumpHeight);
      }
      if (Attribute != 0) {
        output.WriteInt32(7, Attribute);
      }
      if (Race != 0) {
        output.WriteInt32(8, Race);
      }
      if( AttackSkill != null ){
        output.WriteMessage(9, AttackSkill);
      }
      if (Skills != null && Skills.Count > 0) {
        output.WriteMessageArray(10, Skills);
      }
      if (Abilities != null && Abilities.Count > 0) {
        output.WriteMessageArray(11, Abilities);
      }
      if (MaxHp != 0) {
        output.WriteInt32(12, MaxHp);
      }
      if (X != 0) {
        output.WriteInt32(13, X);
      }
      if (Y != 0) {
        output.WriteInt32(14, Y);
      }
      if (SavedDir != 0) {
        output.WriteInt32(15, SavedDir);
      }
      if (Name != "") {
        output.WriteString(16, Name);
      }
      if (Team != 0) {
        output.WriteInt32(17, Team);
      }
      if (Type != global::Game.CharacterType.Player) {
        output.WriteEnum(18, (int) Type, Type);
      }
      if (AtlasId != 0) {
        output.WriteInt32(19, AtlasId);
      }
      if (Speed != 0) {
        output.WriteInt32(20, Speed);
      }
      if (Active != false) {
        output.WriteBool(21, Active);
      }
    }

    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = 0;
      if (Id != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (Hp != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Hp);
      }
      if (X != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(13, X);
      }
      if (Y != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(14, Y);
      }
      if (SavedDir != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(15, SavedDir);
      }
      if (Type != global::Game.CharacterType.Player) {
        size += pb::CodedOutputStream.ComputeEnumSize(18, (int) Type);
      }
      if (Name != "") {
        size += pb::CodedOutputStream.ComputeStringSize(16, Name);
      }
      if (Team != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(17, Team);
      }
      if (AtlasId != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(19, AtlasId);
      }
      if (Attack != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Attack);
      }
      if (Defense != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, Defense);
      }
      if (MaxHp != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(12, MaxHp);
      }
      if (Move != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, Move);
      }
      if (JumpHeight != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, JumpHeight);
      }
      if (Attribute != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(7, Attribute);
      }
      if (Race != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(8, Race);
      }
      if (Speed != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(20, Speed);
      }
      if (Active != false) {
        size += pb::CodedOutputStream.ComputeBoolSize(21, Active);
      }
      if( AttackSkill != null ){
        size += pb::CodedOutputStream.ComputeMessageSize(9, AttackSkill);
      }
      if( Skills != null ) {
        foreach (global::Master.Skill element in Skills) {
          size += pb::CodedOutputStream.ComputeMessageSize(10, element);
        }
      }
      if( Abilities != null ) {
        foreach (global::Master.Ability element in Abilities) {
          size += pb::CodedOutputStream.ComputeMessageSize(11, element);
        }
      }
      return size;
    }
    public static Character ParseFrom(byte[] data) {
      var mes = CreateInstance(); mes.MergeFrom(data); return mes;
    }
    public static Character ParseFrom(global::System.IO.Stream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public static Character ParseFrom(pb::CodedInputStream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public override void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 8: {
            input.ReadInt32(ref this.Id);
            break;
          }
          case 16: {
            input.ReadInt32(ref this.Hp);
            break;
          }
          case 24: {
            input.ReadInt32(ref this.Attack);
            break;
          }
          case 32: {
            input.ReadInt32(ref this.Defense);
            break;
          }
          case 40: {
            input.ReadInt32(ref this.Move);
            break;
          }
          case 48: {
            input.ReadInt32(ref this.JumpHeight);
            break;
          }
          case 56: {
            input.ReadInt32(ref this.Attribute);
            break;
          }
          case 64: {
            input.ReadInt32(ref this.Race);
            break;
          }
          case 74: {
            global::Master.Skill builder = global::Master.Skill.CreateEmpty();
            input.ReadMessage(builder);
            AttackSkill = builder;
            break;
          }
          case 82: {
            input.ReadMessageArray(tag, this.Skills, global::Master.Skill.CreateEmpty);
            break;
          }
          case 90: {
            input.ReadMessageArray(tag, this.Abilities, global::Master.Ability.CreateEmpty);
            break;
          }
          case 96: {
            input.ReadInt32(ref this.MaxHp);
            break;
          }
          case 104: {
            input.ReadInt32(ref this.X);
            break;
          }
          case 112: {
            input.ReadInt32(ref this.Y);
            break;
          }
          case 120: {
            input.ReadInt32(ref this.SavedDir);
            break;
          }
          case 130: {
            input.ReadString(ref this.Name);
            break;
          }
          case 136: {
            input.ReadInt32(ref this.Team);
            break;
          }
          case 144: {
            input.ReadEnum(ref this.Type);
            break;
          }
          case 152: {
            input.ReadInt32(ref this.AtlasId);
            break;
          }
          case 160: {
            input.ReadInt32(ref this.Speed);
            break;
          }
          case 168: {
            input.ReadBool(ref this.Active);
            break;
          }
        }
      }
    }

    public override void Init() {
    }
    public override void Finish() {
    if( AttackSkill == null ){
      AttackSkill = global::Master.Skill.CreateInstance();
    }
    if( Skills == null ){
      Skills = new List<global::Master.Skill>();
    }
    if( Abilities == null ){
      Abilities = new List<global::Master.Ability>();
    }
    }
  }

  #endregion

}

#endregion Designer generated code
