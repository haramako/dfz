// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_log.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using System.Collections.Generic;
using pb = global::Google.ProtocolBuffers;
using scg = global::System.Collections.Generic;
namespace GameLog {

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class GameLog {

  }
  #region Enums
  public enum Animation {
    None = 0,
    Attack = 1,
    Damaged = 2,
  }

  #endregion

  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Point : pb.Message {
    public Point() { }
    public static Point CreateInstance() { var obj = new Point(); obj.Finish(); return obj; }
    public static Point CreateEmpty() { return new Point(); }
    private static readonly Point defaultInstance = new Point();
    public static Point DefaultInstance {
      get { return defaultInstance; }
    }

    public int X;

    public int Y;

    #region Lite runtime methods
    #endregion

    public override void WriteTo(pb::CodedOutputStream output) {
      CalcSerializedSize();
      if (X != 0) {
        output.WriteInt32(1, X);
      }
      if (Y != 0) {
        output.WriteInt32(2, Y);
      }
    }

    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = 0;
      if (X != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, X);
      }
      if (Y != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Y);
      }
      return size;
    }
    public static Point ParseFrom(byte[] data) {
      var mes = CreateInstance(); mes.MergeFrom(data); return mes;
    }
    public static Point ParseFrom(global::System.IO.Stream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public static Point ParseFrom(pb::CodedInputStream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public override void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 8: {
            input.ReadInt32(ref this.X);
            break;
          }
          case 16: {
            input.ReadInt32(ref this.Y);
            break;
          }
        }
      }
    }

    public override void Init() {
    }
    public override void Finish() {
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class DamageInfo : pb.Message {
    public DamageInfo() { }
    public static DamageInfo CreateInstance() { var obj = new DamageInfo(); obj.Finish(); return obj; }
    public static DamageInfo CreateEmpty() { return new DamageInfo(); }
    private static readonly DamageInfo defaultInstance = new DamageInfo();
    public static DamageInfo DefaultInstance {
      get { return defaultInstance; }
    }

    public int Amount;

    #region Lite runtime methods
    #endregion

    public override void WriteTo(pb::CodedOutputStream output) {
      CalcSerializedSize();
      if (Amount != 0) {
        output.WriteInt32(1, Amount);
      }
    }

    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = 0;
      if (Amount != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Amount);
      }
      return size;
    }
    public static DamageInfo ParseFrom(byte[] data) {
      var mes = CreateInstance(); mes.MergeFrom(data); return mes;
    }
    public static DamageInfo ParseFrom(global::System.IO.Stream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public static DamageInfo ParseFrom(pb::CodedInputStream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public override void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 8: {
            input.ReadInt32(ref this.Amount);
            break;
          }
        }
      }
    }

    public override void Init() {
    }
    public override void Finish() {
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Walk : pb.Message {
    public Walk() { }
    public static Walk CreateInstance() { var obj = new Walk(); obj.Finish(); return obj; }
    public static Walk CreateEmpty() { return new Walk(); }
    private static readonly Walk defaultInstance = new Walk();
    public static Walk DefaultInstance {
      get { return defaultInstance; }
    }

    public int CharacterId;

    public int X;

    public int Y;

    public int OldX;

    public int OldY;

    public int Dir;

    #region Lite runtime methods
    #endregion

    public override void WriteTo(pb::CodedOutputStream output) {
      CalcSerializedSize();
      if (CharacterId != 0) {
        output.WriteInt32(1, CharacterId);
      }
      if (X != 0) {
        output.WriteInt32(2, X);
      }
      if (Y != 0) {
        output.WriteInt32(3, Y);
      }
      if (OldX != 0) {
        output.WriteInt32(4, OldX);
      }
      if (OldY != 0) {
        output.WriteInt32(5, OldY);
      }
      if (Dir != 0) {
        output.WriteInt32(6, Dir);
      }
    }

    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = 0;
      if (CharacterId != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, CharacterId);
      }
      if (X != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, X);
      }
      if (Y != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Y);
      }
      if (OldX != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, OldX);
      }
      if (OldY != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, OldY);
      }
      if (Dir != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, Dir);
      }
      return size;
    }
    public static Walk ParseFrom(byte[] data) {
      var mes = CreateInstance(); mes.MergeFrom(data); return mes;
    }
    public static Walk ParseFrom(global::System.IO.Stream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public static Walk ParseFrom(pb::CodedInputStream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public override void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 8: {
            input.ReadInt32(ref this.CharacterId);
            break;
          }
          case 16: {
            input.ReadInt32(ref this.X);
            break;
          }
          case 24: {
            input.ReadInt32(ref this.Y);
            break;
          }
          case 32: {
            input.ReadInt32(ref this.OldX);
            break;
          }
          case 40: {
            input.ReadInt32(ref this.OldY);
            break;
          }
          case 48: {
            input.ReadInt32(ref this.Dir);
            break;
          }
        }
      }
    }

    public override void Init() {
    }
    public override void Finish() {
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class WalkMulti : pb.Message {
    public WalkMulti() { }
    public static WalkMulti CreateInstance() { var obj = new WalkMulti(); obj.Finish(); return obj; }
    public static WalkMulti CreateEmpty() { return new WalkMulti(); }
    private static readonly WalkMulti defaultInstance = new WalkMulti();
    public static WalkMulti DefaultInstance {
      get { return defaultInstance; }
    }

    public List<global::GameLog.Walk> Items;

    #region Lite runtime methods
    #endregion

    public override void WriteTo(pb::CodedOutputStream output) {
      CalcSerializedSize();
      if (Items != null && Items.Count > 0) {
        output.WriteMessageArray(1, Items);
      }
    }

    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = 0;
      if( Items != null ) {
        foreach (global::GameLog.Walk element in Items) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
      }
      return size;
    }
    public static WalkMulti ParseFrom(byte[] data) {
      var mes = CreateInstance(); mes.MergeFrom(data); return mes;
    }
    public static WalkMulti ParseFrom(global::System.IO.Stream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public static WalkMulti ParseFrom(pb::CodedInputStream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public override void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, this.Items, global::GameLog.Walk.CreateEmpty);
            break;
          }
        }
      }
    }

    public override void Init() {
    }
    public override void Finish() {
    if( Items == null ){
      Items = new List<global::GameLog.Walk>();
    }
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Skill : pb.Message {
    public Skill() { }
    public static Skill CreateInstance() { var obj = new Skill(); obj.Finish(); return obj; }
    public static Skill CreateEmpty() { return new Skill(); }
    private static readonly Skill defaultInstance = new Skill();
    public static Skill DefaultInstance {
      get { return defaultInstance; }
    }

    public int CharacterId;

    public int X;

    public int Y;

    public int Dir;

    public string SkillId = "";

    #region Lite runtime methods
    #endregion

    public override void WriteTo(pb::CodedOutputStream output) {
      CalcSerializedSize();
      if (CharacterId != 0) {
        output.WriteInt32(1, CharacterId);
      }
      if (X != 0) {
        output.WriteInt32(2, X);
      }
      if (Y != 0) {
        output.WriteInt32(3, Y);
      }
      if (Dir != 0) {
        output.WriteInt32(4, Dir);
      }
      if (SkillId != "") {
        output.WriteString(5, SkillId);
      }
    }

    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = 0;
      if (CharacterId != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, CharacterId);
      }
      if (X != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, X);
      }
      if (Y != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Y);
      }
      if (Dir != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, Dir);
      }
      if (SkillId != "") {
        size += pb::CodedOutputStream.ComputeStringSize(5, SkillId);
      }
      return size;
    }
    public static Skill ParseFrom(byte[] data) {
      var mes = CreateInstance(); mes.MergeFrom(data); return mes;
    }
    public static Skill ParseFrom(global::System.IO.Stream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public static Skill ParseFrom(pb::CodedInputStream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public override void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 8: {
            input.ReadInt32(ref this.CharacterId);
            break;
          }
          case 16: {
            input.ReadInt32(ref this.X);
            break;
          }
          case 24: {
            input.ReadInt32(ref this.Y);
            break;
          }
          case 32: {
            input.ReadInt32(ref this.Dir);
            break;
          }
          case 42: {
            input.ReadString(ref this.SkillId);
            break;
          }
        }
      }
    }

    public override void Init() {
    }
    public override void Finish() {
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Damage : pb.Message {
    public Damage() { }
    public static Damage CreateInstance() { var obj = new Damage(); obj.Finish(); return obj; }
    public static Damage CreateEmpty() { return new Damage(); }
    private static readonly Damage defaultInstance = new Damage();
    public static Damage DefaultInstance {
      get { return defaultInstance; }
    }

    public int CharacterId;

    public int X;

    public int Y;

    public int Dir;

    public int Hp;

    public int OldHp;

    #region Lite runtime methods
    #endregion

    public override void WriteTo(pb::CodedOutputStream output) {
      CalcSerializedSize();
      if (CharacterId != 0) {
        output.WriteInt32(1, CharacterId);
      }
      if (X != 0) {
        output.WriteInt32(2, X);
      }
      if (Y != 0) {
        output.WriteInt32(3, Y);
      }
      if (Dir != 0) {
        output.WriteInt32(4, Dir);
      }
      if (Hp != 0) {
        output.WriteInt32(5, Hp);
      }
      if (OldHp != 0) {
        output.WriteInt32(6, OldHp);
      }
    }

    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = 0;
      if (CharacterId != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, CharacterId);
      }
      if (X != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, X);
      }
      if (Y != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Y);
      }
      if (Dir != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, Dir);
      }
      if (Hp != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, Hp);
      }
      if (OldHp != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, OldHp);
      }
      return size;
    }
    public static Damage ParseFrom(byte[] data) {
      var mes = CreateInstance(); mes.MergeFrom(data); return mes;
    }
    public static Damage ParseFrom(global::System.IO.Stream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public static Damage ParseFrom(pb::CodedInputStream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public override void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 8: {
            input.ReadInt32(ref this.CharacterId);
            break;
          }
          case 16: {
            input.ReadInt32(ref this.X);
            break;
          }
          case 24: {
            input.ReadInt32(ref this.Y);
            break;
          }
          case 32: {
            input.ReadInt32(ref this.Dir);
            break;
          }
          case 40: {
            input.ReadInt32(ref this.Hp);
            break;
          }
          case 48: {
            input.ReadInt32(ref this.OldHp);
            break;
          }
        }
      }
    }

    public override void Init() {
    }
    public override void Finish() {
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AnimateCharacter : pb.Message {
    public AnimateCharacter() { }
    public static AnimateCharacter CreateInstance() { var obj = new AnimateCharacter(); obj.Finish(); return obj; }
    public static AnimateCharacter CreateEmpty() { return new AnimateCharacter(); }
    private static readonly AnimateCharacter defaultInstance = new AnimateCharacter();
    public static AnimateCharacter DefaultInstance {
      get { return defaultInstance; }
    }

    public int CharacterId;

    public int X;

    public int Y;

    public int Dir;

    public global::GameLog.Animation Animation = global::GameLog.Animation.None;

    #region Lite runtime methods
    #endregion

    public override void WriteTo(pb::CodedOutputStream output) {
      CalcSerializedSize();
      if (CharacterId != 0) {
        output.WriteInt32(1, CharacterId);
      }
      if (X != 0) {
        output.WriteInt32(2, X);
      }
      if (Y != 0) {
        output.WriteInt32(3, Y);
      }
      if (Dir != 0) {
        output.WriteInt32(4, Dir);
      }
      if (Animation != global::GameLog.Animation.None) {
        output.WriteEnum(5, (int) Animation, Animation);
      }
    }

    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = 0;
      if (CharacterId != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, CharacterId);
      }
      if (X != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, X);
      }
      if (Y != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Y);
      }
      if (Dir != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, Dir);
      }
      if (Animation != global::GameLog.Animation.None) {
        size += pb::CodedOutputStream.ComputeEnumSize(5, (int) Animation);
      }
      return size;
    }
    public static AnimateCharacter ParseFrom(byte[] data) {
      var mes = CreateInstance(); mes.MergeFrom(data); return mes;
    }
    public static AnimateCharacter ParseFrom(global::System.IO.Stream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public static AnimateCharacter ParseFrom(pb::CodedInputStream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public override void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 8: {
            input.ReadInt32(ref this.CharacterId);
            break;
          }
          case 16: {
            input.ReadInt32(ref this.X);
            break;
          }
          case 24: {
            input.ReadInt32(ref this.Y);
            break;
          }
          case 32: {
            input.ReadInt32(ref this.Dir);
            break;
          }
          case 40: {
            input.ReadEnum(ref this.Animation);
            break;
          }
        }
      }
    }

    public override void Init() {
    }
    public override void Finish() {
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ShowEffect : pb.Message {
    public ShowEffect() { }
    public static ShowEffect CreateInstance() { var obj = new ShowEffect(); obj.Finish(); return obj; }
    public static ShowEffect CreateEmpty() { return new ShowEffect(); }
    private static readonly ShowEffect defaultInstance = new ShowEffect();
    public static ShowEffect DefaultInstance {
      get { return defaultInstance; }
    }

    public float X;

    public float Y;

    public int Dir;

    public string EffectSymbol = "";

    #region Lite runtime methods
    #endregion

    public override void WriteTo(pb::CodedOutputStream output) {
      CalcSerializedSize();
      if (X != 0F) {
        output.WriteFloat(1, X);
      }
      if (Y != 0F) {
        output.WriteFloat(2, Y);
      }
      if (Dir != 0) {
        output.WriteInt32(3, Dir);
      }
      if (EffectSymbol != "") {
        output.WriteString(4, EffectSymbol);
      }
    }

    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = 0;
      if (X != 0F) {
        size += pb::CodedOutputStream.ComputeFloatSize(1, X);
      }
      if (Y != 0F) {
        size += pb::CodedOutputStream.ComputeFloatSize(2, Y);
      }
      if (Dir != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Dir);
      }
      if (EffectSymbol != "") {
        size += pb::CodedOutputStream.ComputeStringSize(4, EffectSymbol);
      }
      return size;
    }
    public static ShowEffect ParseFrom(byte[] data) {
      var mes = CreateInstance(); mes.MergeFrom(data); return mes;
    }
    public static ShowEffect ParseFrom(global::System.IO.Stream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public static ShowEffect ParseFrom(pb::CodedInputStream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public override void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 13: {
            input.ReadFloat(ref this.X);
            break;
          }
          case 21: {
            input.ReadFloat(ref this.Y);
            break;
          }
          case 24: {
            input.ReadInt32(ref this.Dir);
            break;
          }
          case 34: {
            input.ReadString(ref this.EffectSymbol);
            break;
          }
        }
      }
    }

    public override void Init() {
    }
    public override void Finish() {
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class KillCharacter : pb.Message {
    public KillCharacter() { }
    public static KillCharacter CreateInstance() { var obj = new KillCharacter(); obj.Finish(); return obj; }
    public static KillCharacter CreateEmpty() { return new KillCharacter(); }
    private static readonly KillCharacter defaultInstance = new KillCharacter();
    public static KillCharacter DefaultInstance {
      get { return defaultInstance; }
    }

    public int CharacterId;

    public int X;

    public int Y;

    #region Lite runtime methods
    #endregion

    public override void WriteTo(pb::CodedOutputStream output) {
      CalcSerializedSize();
      if (CharacterId != 0) {
        output.WriteInt32(1, CharacterId);
      }
      if (X != 0) {
        output.WriteInt32(2, X);
      }
      if (Y != 0) {
        output.WriteInt32(3, Y);
      }
    }

    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = 0;
      if (CharacterId != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, CharacterId);
      }
      if (X != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, X);
      }
      if (Y != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Y);
      }
      return size;
    }
    public static KillCharacter ParseFrom(byte[] data) {
      var mes = CreateInstance(); mes.MergeFrom(data); return mes;
    }
    public static KillCharacter ParseFrom(global::System.IO.Stream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public static KillCharacter ParseFrom(pb::CodedInputStream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public override void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 8: {
            input.ReadInt32(ref this.CharacterId);
            break;
          }
          case 16: {
            input.ReadInt32(ref this.X);
            break;
          }
          case 24: {
            input.ReadInt32(ref this.Y);
            break;
          }
        }
      }
    }

    public override void Init() {
    }
    public override void Finish() {
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Shutdown : pb.Message {
    public Shutdown() { }
    public static Shutdown CreateInstance() { var obj = new Shutdown(); obj.Finish(); return obj; }
    public static Shutdown CreateEmpty() { return new Shutdown(); }
    private static readonly Shutdown defaultInstance = new Shutdown();
    public static Shutdown DefaultInstance {
      get { return defaultInstance; }
    }

    #region Lite runtime methods
    #endregion

    public override void WriteTo(pb::CodedOutputStream output) {
      CalcSerializedSize();
    }

    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = 0;
      return size;
    }
    public static Shutdown ParseFrom(byte[] data) {
      var mes = CreateInstance(); mes.MergeFrom(data); return mes;
    }
    public static Shutdown ParseFrom(global::System.IO.Stream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public static Shutdown ParseFrom(pb::CodedInputStream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public override void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
        }
      }
    }

    public override void Init() {
    }
    public override void Finish() {
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AckResponseRequest : pb.Message {
    public AckResponseRequest() { }
    public static AckResponseRequest CreateInstance() { var obj = new AckResponseRequest(); obj.Finish(); return obj; }
    public static AckResponseRequest CreateEmpty() { return new AckResponseRequest(); }
    private static readonly AckResponseRequest defaultInstance = new AckResponseRequest();
    public static AckResponseRequest DefaultInstance {
      get { return defaultInstance; }
    }

    #region Lite runtime methods
    #endregion

    public override void WriteTo(pb::CodedOutputStream output) {
      CalcSerializedSize();
    }

    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = 0;
      return size;
    }
    public static AckResponseRequest ParseFrom(byte[] data) {
      var mes = CreateInstance(); mes.MergeFrom(data); return mes;
    }
    public static AckResponseRequest ParseFrom(global::System.IO.Stream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public static AckResponseRequest ParseFrom(pb::CodedInputStream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public override void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
        }
      }
    }

    public override void Init() {
    }
    public override void Finish() {
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ShutdownRequest : pb.Message {
    public ShutdownRequest() { }
    public static ShutdownRequest CreateInstance() { var obj = new ShutdownRequest(); obj.Finish(); return obj; }
    public static ShutdownRequest CreateEmpty() { return new ShutdownRequest(); }
    private static readonly ShutdownRequest defaultInstance = new ShutdownRequest();
    public static ShutdownRequest DefaultInstance {
      get { return defaultInstance; }
    }

    #region Lite runtime methods
    #endregion

    public override void WriteTo(pb::CodedOutputStream output) {
      CalcSerializedSize();
    }

    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = 0;
      return size;
    }
    public static ShutdownRequest ParseFrom(byte[] data) {
      var mes = CreateInstance(); mes.MergeFrom(data); return mes;
    }
    public static ShutdownRequest ParseFrom(global::System.IO.Stream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public static ShutdownRequest ParseFrom(pb::CodedInputStream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public override void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
        }
      }
    }

    public override void Init() {
    }
    public override void Finish() {
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class StayRequest : pb.Message {
    public StayRequest() { }
    public static StayRequest CreateInstance() { var obj = new StayRequest(); obj.Finish(); return obj; }
    public static StayRequest CreateEmpty() { return new StayRequest(); }
    private static readonly StayRequest defaultInstance = new StayRequest();
    public static StayRequest DefaultInstance {
      get { return defaultInstance; }
    }

    #region Lite runtime methods
    #endregion

    public override void WriteTo(pb::CodedOutputStream output) {
      CalcSerializedSize();
    }

    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = 0;
      return size;
    }
    public static StayRequest ParseFrom(byte[] data) {
      var mes = CreateInstance(); mes.MergeFrom(data); return mes;
    }
    public static StayRequest ParseFrom(global::System.IO.Stream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public static StayRequest ParseFrom(pb::CodedInputStream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public override void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
        }
      }
    }

    public override void Init() {
    }
    public override void Finish() {
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SkillRequest : pb.Message {
    public SkillRequest() { }
    public static SkillRequest CreateInstance() { var obj = new SkillRequest(); obj.Finish(); return obj; }
    public static SkillRequest CreateEmpty() { return new SkillRequest(); }
    private static readonly SkillRequest defaultInstance = new SkillRequest();
    public static SkillRequest DefaultInstance {
      get { return defaultInstance; }
    }

    public int CharacterId;

    public int Dir;

    public int SkillId;

    #region Lite runtime methods
    #endregion

    public override void WriteTo(pb::CodedOutputStream output) {
      CalcSerializedSize();
      if (CharacterId != 0) {
        output.WriteInt32(1, CharacterId);
      }
      if (Dir != 0) {
        output.WriteInt32(2, Dir);
      }
      if (SkillId != 0) {
        output.WriteInt32(3, SkillId);
      }
    }

    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = 0;
      if (CharacterId != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, CharacterId);
      }
      if (Dir != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Dir);
      }
      if (SkillId != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, SkillId);
      }
      return size;
    }
    public static SkillRequest ParseFrom(byte[] data) {
      var mes = CreateInstance(); mes.MergeFrom(data); return mes;
    }
    public static SkillRequest ParseFrom(global::System.IO.Stream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public static SkillRequest ParseFrom(pb::CodedInputStream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public override void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 8: {
            input.ReadInt32(ref this.CharacterId);
            break;
          }
          case 16: {
            input.ReadInt32(ref this.Dir);
            break;
          }
          case 24: {
            input.ReadInt32(ref this.SkillId);
            break;
          }
        }
      }
    }

    public override void Init() {
    }
    public override void Finish() {
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class WalkRequest : pb.Message {
    public WalkRequest() { }
    public static WalkRequest CreateInstance() { var obj = new WalkRequest(); obj.Finish(); return obj; }
    public static WalkRequest CreateEmpty() { return new WalkRequest(); }
    private static readonly WalkRequest defaultInstance = new WalkRequest();
    public static WalkRequest DefaultInstance {
      get { return defaultInstance; }
    }

    public int CharacterId;

    public List<global::GameLog.Point> Path;

    #region Lite runtime methods
    #endregion

    public override void WriteTo(pb::CodedOutputStream output) {
      CalcSerializedSize();
      if (CharacterId != 0) {
        output.WriteInt32(1, CharacterId);
      }
      if (Path != null && Path.Count > 0) {
        output.WriteMessageArray(2, Path);
      }
    }

    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = 0;
      if (CharacterId != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, CharacterId);
      }
      if( Path != null ) {
        foreach (global::GameLog.Point element in Path) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
      }
      return size;
    }
    public static WalkRequest ParseFrom(byte[] data) {
      var mes = CreateInstance(); mes.MergeFrom(data); return mes;
    }
    public static WalkRequest ParseFrom(global::System.IO.Stream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public static WalkRequest ParseFrom(pb::CodedInputStream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public override void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 8: {
            input.ReadInt32(ref this.CharacterId);
            break;
          }
          case 18: {
            input.ReadMessageArray(tag, this.Path, global::GameLog.Point.CreateEmpty);
            break;
          }
        }
      }
    }

    public override void Init() {
    }
    public override void Finish() {
    if( Path == null ){
      Path = new List<global::GameLog.Point>();
    }
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Message : pb.Message {
    public Message() { }
    public static Message CreateInstance() { var obj = new Message(); obj.Finish(); return obj; }
    public static Message CreateEmpty() { return new Message(); }
    private static readonly Message defaultInstance = new Message();
    public static Message DefaultInstance {
      get { return defaultInstance; }
    }

    public string MessageId = "";

    public List<string> Param = new List<string>();

    #region Lite runtime methods
    #endregion

    public override void WriteTo(pb::CodedOutputStream output) {
      CalcSerializedSize();
      if (MessageId != "") {
        output.WriteString(1, MessageId);
      }
      if (Param.Count > 0) {
        output.WriteStringArray(2, Param);
      }
    }

    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = 0;
      if (MessageId != "") {
        size += pb::CodedOutputStream.ComputeStringSize(1, MessageId);
      }
      {
        int dataSize = 0;
        foreach (string element in Param) {
          dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * Param.Count;
      }
      return size;
    }
    public static Message ParseFrom(byte[] data) {
      var mes = CreateInstance(); mes.MergeFrom(data); return mes;
    }
    public static Message ParseFrom(global::System.IO.Stream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public static Message ParseFrom(pb::CodedInputStream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public override void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 10: {
            input.ReadString(ref this.MessageId);
            break;
          }
          case 18: {
            input.ReadStringArray(tag, this.Param);
            break;
          }
        }
      }
    }

    public override void Init() {
    }
    public override void Finish() {
    if( Param == null ){
      Param = new List<string>();
    }
    }
  }

  #endregion

}

#endregion Designer generated code
