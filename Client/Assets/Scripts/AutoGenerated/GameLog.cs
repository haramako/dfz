// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_log.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using System.Collections.Generic;
using pb = global::Google.ProtocolBuffers;
using scg = global::System.Collections.Generic;
namespace GameLog {

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class GameLog {

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Point : pb.Message {
    private Point() { }
    public static Point CreateInstance() { var obj = new Point(); obj.Finish(); return obj; }
    public static Point CreateEmpty() { return new Point(); }
    private static readonly Point defaultInstance = new Point();
    public static Point DefaultInstance {
      get { return defaultInstance; }
    }

    public int X;

    public int Y;

    #region Lite runtime methods
    #endregion

    public override void WriteTo(pb::CodedOutputStream output) {
      CalcSerializedSize();
      if (X != 0) {
        output.WriteInt32(1, X);
      }
      if (Y != 0) {
        output.WriteInt32(2, Y);
      }
    }

    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = 0;
      if (X != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, X);
      }
      if (Y != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Y);
      }
      return size;
    }
    public static Point ParseFrom(byte[] data) {
      var mes = CreateInstance(); mes.MergeFrom(data); return mes;
    }
    public static Point ParseFrom(global::System.IO.Stream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public static Point ParseFrom(pb::CodedInputStream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public override void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 8: {
            input.ReadInt32(ref this.X);
            break;
          }
          case 16: {
            input.ReadInt32(ref this.Y);
            break;
          }
        }
      }
    }

    public override void Init() {
    }
    public override void Finish() {
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class WaitForRequest : pb.Message {
    private WaitForRequest() { }
    public static WaitForRequest CreateInstance() { var obj = new WaitForRequest(); obj.Finish(); return obj; }
    public static WaitForRequest CreateEmpty() { return new WaitForRequest(); }
    private static readonly WaitForRequest defaultInstance = new WaitForRequest();
    public static WaitForRequest DefaultInstance {
      get { return defaultInstance; }
    }

    #region Lite runtime methods
    #endregion

    public override void WriteTo(pb::CodedOutputStream output) {
      CalcSerializedSize();
    }

    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = 0;
      return size;
    }
    public static WaitForRequest ParseFrom(byte[] data) {
      var mes = CreateInstance(); mes.MergeFrom(data); return mes;
    }
    public static WaitForRequest ParseFrom(global::System.IO.Stream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public static WaitForRequest ParseFrom(pb::CodedInputStream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public override void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
        }
      }
    }

    public override void Init() {
    }
    public override void Finish() {
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Walk : pb.Message {
    private Walk() { }
    public static Walk CreateInstance() { var obj = new Walk(); obj.Finish(); return obj; }
    public static Walk CreateEmpty() { return new Walk(); }
    private static readonly Walk defaultInstance = new Walk();
    public static Walk DefaultInstance {
      get { return defaultInstance; }
    }

    public int CharacterId;

    public int X;

    public int Y;

    public int Dir;

    #region Lite runtime methods
    #endregion

    public override void WriteTo(pb::CodedOutputStream output) {
      CalcSerializedSize();
      if (CharacterId != 0) {
        output.WriteInt32(1, CharacterId);
      }
      if (X != 0) {
        output.WriteInt32(2, X);
      }
      if (Y != 0) {
        output.WriteInt32(3, Y);
      }
      if (Dir != 0) {
        output.WriteInt32(4, Dir);
      }
    }

    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = 0;
      if (CharacterId != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, CharacterId);
      }
      if (X != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, X);
      }
      if (Y != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Y);
      }
      if (Dir != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, Dir);
      }
      return size;
    }
    public static Walk ParseFrom(byte[] data) {
      var mes = CreateInstance(); mes.MergeFrom(data); return mes;
    }
    public static Walk ParseFrom(global::System.IO.Stream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public static Walk ParseFrom(pb::CodedInputStream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public override void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 8: {
            input.ReadInt32(ref this.CharacterId);
            break;
          }
          case 16: {
            input.ReadInt32(ref this.X);
            break;
          }
          case 24: {
            input.ReadInt32(ref this.Y);
            break;
          }
          case 32: {
            input.ReadInt32(ref this.Dir);
            break;
          }
        }
      }
    }

    public override void Init() {
    }
    public override void Finish() {
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Shutdown : pb.Message {
    private Shutdown() { }
    public static Shutdown CreateInstance() { var obj = new Shutdown(); obj.Finish(); return obj; }
    public static Shutdown CreateEmpty() { return new Shutdown(); }
    private static readonly Shutdown defaultInstance = new Shutdown();
    public static Shutdown DefaultInstance {
      get { return defaultInstance; }
    }

    #region Lite runtime methods
    #endregion

    public override void WriteTo(pb::CodedOutputStream output) {
      CalcSerializedSize();
    }

    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = 0;
      return size;
    }
    public static Shutdown ParseFrom(byte[] data) {
      var mes = CreateInstance(); mes.MergeFrom(data); return mes;
    }
    public static Shutdown ParseFrom(global::System.IO.Stream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public static Shutdown ParseFrom(pb::CodedInputStream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public override void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
        }
      }
    }

    public override void Init() {
    }
    public override void Finish() {
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AckRequest : pb.Message {
    private AckRequest() { }
    public static AckRequest CreateInstance() { var obj = new AckRequest(); obj.Finish(); return obj; }
    public static AckRequest CreateEmpty() { return new AckRequest(); }
    private static readonly AckRequest defaultInstance = new AckRequest();
    public static AckRequest DefaultInstance {
      get { return defaultInstance; }
    }

    #region Lite runtime methods
    #endregion

    public override void WriteTo(pb::CodedOutputStream output) {
      CalcSerializedSize();
    }

    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = 0;
      return size;
    }
    public static AckRequest ParseFrom(byte[] data) {
      var mes = CreateInstance(); mes.MergeFrom(data); return mes;
    }
    public static AckRequest ParseFrom(global::System.IO.Stream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public static AckRequest ParseFrom(pb::CodedInputStream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public override void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
        }
      }
    }

    public override void Init() {
    }
    public override void Finish() {
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ShutdownRequest : pb.Message {
    private ShutdownRequest() { }
    public static ShutdownRequest CreateInstance() { var obj = new ShutdownRequest(); obj.Finish(); return obj; }
    public static ShutdownRequest CreateEmpty() { return new ShutdownRequest(); }
    private static readonly ShutdownRequest defaultInstance = new ShutdownRequest();
    public static ShutdownRequest DefaultInstance {
      get { return defaultInstance; }
    }

    #region Lite runtime methods
    #endregion

    public override void WriteTo(pb::CodedOutputStream output) {
      CalcSerializedSize();
    }

    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = 0;
      return size;
    }
    public static ShutdownRequest ParseFrom(byte[] data) {
      var mes = CreateInstance(); mes.MergeFrom(data); return mes;
    }
    public static ShutdownRequest ParseFrom(global::System.IO.Stream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public static ShutdownRequest ParseFrom(pb::CodedInputStream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public override void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
        }
      }
    }

    public override void Init() {
    }
    public override void Finish() {
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class WalkRequest : pb.Message {
    private WalkRequest() { }
    public static WalkRequest CreateInstance() { var obj = new WalkRequest(); obj.Finish(); return obj; }
    public static WalkRequest CreateEmpty() { return new WalkRequest(); }
    private static readonly WalkRequest defaultInstance = new WalkRequest();
    public static WalkRequest DefaultInstance {
      get { return defaultInstance; }
    }

    public int CharacterId;

    public List<global::GameLog.Point> Path;

    #region Lite runtime methods
    #endregion

    public override void WriteTo(pb::CodedOutputStream output) {
      CalcSerializedSize();
      if (CharacterId != 0) {
        output.WriteInt32(1, CharacterId);
      }
      if (Path != null && Path.Count > 0) {
        output.WriteMessageArray(2, Path);
      }
    }

    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = 0;
      if (CharacterId != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, CharacterId);
      }
      if( Path != null ) {
        foreach (global::GameLog.Point element in Path) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
      }
      return size;
    }
    public static WalkRequest ParseFrom(byte[] data) {
      var mes = CreateInstance(); mes.MergeFrom(data); return mes;
    }
    public static WalkRequest ParseFrom(global::System.IO.Stream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public static WalkRequest ParseFrom(pb::CodedInputStream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public override void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 8: {
            input.ReadInt32(ref this.CharacterId);
            break;
          }
          case 18: {
            input.ReadMessageArray(tag, this.Path, global::GameLog.Point.CreateEmpty);
            break;
          }
        }
      }
    }

    public override void Init() {
    }
    public override void Finish() {
    if( Path == null ){
      Path = new List<global::GameLog.Point>();
    }
    }
  }

  #endregion

}

#endregion Designer generated code
