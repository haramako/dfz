// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: master.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using System.Collections.Generic;
using pb = global::Google.ProtocolBuffers;
using scg = global::System.Collections.Generic;
namespace Master {

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Master {

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PbxHeader : pb.Message {
    private PbxHeader() { }
    public static PbxHeader CreateInstance() { var obj = new PbxHeader(); obj.Finish(); return obj; }
    public static PbxHeader CreateEmpty() { return new PbxHeader(); }
    private static readonly PbxHeader defaultInstance = new PbxHeader();
    public static PbxHeader DefaultInstance {
      get { return defaultInstance; }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class IntIndexEntry : pb.Message {
        private IntIndexEntry() { }
        public static IntIndexEntry CreateInstance() { var obj = new IntIndexEntry(); obj.Finish(); return obj; }
        public static IntIndexEntry CreateEmpty() { return new IntIndexEntry(); }
        private static readonly IntIndexEntry defaultInstance = new IntIndexEntry();
        public static IntIndexEntry DefaultInstance {
          get { return defaultInstance; }
        }

        public int Key;

        public int Value;

        #region Lite runtime methods
        #endregion

        public override void WriteTo(pb::CodedOutputStream output) {
          CalcSerializedSize();
          if (Key != 0) {
            output.WriteInt32(1, Key);
          }
          if (Value != 0) {
            output.WriteInt32(2, Value);
          }
        }

        public override int SerializedSize {
          get {
            return CalcSerializedSize();
          }
        }

        private int CalcSerializedSize() {
          int size = 0;
          if (Key != 0) {
            size += pb::CodedOutputStream.ComputeInt32Size(1, Key);
          }
          if (Value != 0) {
            size += pb::CodedOutputStream.ComputeInt32Size(2, Value);
          }
          return size;
        }
        public static IntIndexEntry ParseFrom(byte[] data) {
          var mes = CreateInstance(); mes.MergeFrom(data); return mes;
        }
        public static IntIndexEntry ParseFrom(global::System.IO.Stream input) {
          var mes = CreateInstance(); mes.MergeFrom(input); return mes;
        }
        public static IntIndexEntry ParseFrom(pb::CodedInputStream input) {
          var mes = CreateInstance(); mes.MergeFrom(input); return mes;
        }
        public override void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while (input.ReadTag(out tag)) {
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  return;
                }
                break;
              }
              case 8: {
                input.ReadInt32(ref this.Key);
                break;
              }
              case 16: {
                input.ReadInt32(ref this.Value);
                break;
              }
            }
          }
        }

        public override void Init() {
        }
        public override void Finish() {
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class StringIndexEntry : pb.Message {
        private StringIndexEntry() { }
        public static StringIndexEntry CreateInstance() { var obj = new StringIndexEntry(); obj.Finish(); return obj; }
        public static StringIndexEntry CreateEmpty() { return new StringIndexEntry(); }
        private static readonly StringIndexEntry defaultInstance = new StringIndexEntry();
        public static StringIndexEntry DefaultInstance {
          get { return defaultInstance; }
        }

        public string Key = "";

        public int Value;

        #region Lite runtime methods
        #endregion

        public override void WriteTo(pb::CodedOutputStream output) {
          CalcSerializedSize();
          if (Key != "") {
            output.WriteString(1, Key);
          }
          if (Value != 0) {
            output.WriteInt32(2, Value);
          }
        }

        public override int SerializedSize {
          get {
            return CalcSerializedSize();
          }
        }

        private int CalcSerializedSize() {
          int size = 0;
          if (Key != "") {
            size += pb::CodedOutputStream.ComputeStringSize(1, Key);
          }
          if (Value != 0) {
            size += pb::CodedOutputStream.ComputeInt32Size(2, Value);
          }
          return size;
        }
        public static StringIndexEntry ParseFrom(byte[] data) {
          var mes = CreateInstance(); mes.MergeFrom(data); return mes;
        }
        public static StringIndexEntry ParseFrom(global::System.IO.Stream input) {
          var mes = CreateInstance(); mes.MergeFrom(input); return mes;
        }
        public static StringIndexEntry ParseFrom(pb::CodedInputStream input) {
          var mes = CreateInstance(); mes.MergeFrom(input); return mes;
        }
        public override void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while (input.ReadTag(out tag)) {
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  return;
                }
                break;
              }
              case 10: {
                input.ReadString(ref this.Key);
                break;
              }
              case 16: {
                input.ReadInt32(ref this.Value);
                break;
              }
            }
          }
        }

        public override void Init() {
        }
        public override void Finish() {
        }
      }

    }
    #endregion

    public List<global::Master.PbxHeader.Types.IntIndexEntry> IntIndex;

    public List<global::Master.PbxHeader.Types.StringIndexEntry> StringIndex;

    #region Lite runtime methods
    #endregion

    public override void WriteTo(pb::CodedOutputStream output) {
      CalcSerializedSize();
      if (IntIndex != null && IntIndex.Count > 0) {
        output.WriteMessageArray(1, IntIndex);
      }
      if (StringIndex != null && StringIndex.Count > 0) {
        output.WriteMessageArray(2, StringIndex);
      }
    }

    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = 0;
      if( IntIndex != null ) {
        foreach (global::Master.PbxHeader.Types.IntIndexEntry element in IntIndex) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
      }
      if( StringIndex != null ) {
        foreach (global::Master.PbxHeader.Types.StringIndexEntry element in StringIndex) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
      }
      return size;
    }
    public static PbxHeader ParseFrom(byte[] data) {
      var mes = CreateInstance(); mes.MergeFrom(data); return mes;
    }
    public static PbxHeader ParseFrom(global::System.IO.Stream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public static PbxHeader ParseFrom(pb::CodedInputStream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public override void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, this.IntIndex, global::Master.PbxHeader.Types.IntIndexEntry.CreateEmpty);
            break;
          }
          case 18: {
            input.ReadMessageArray(tag, this.StringIndex, global::Master.PbxHeader.Types.StringIndexEntry.CreateEmpty);
            break;
          }
        }
      }
    }

    public override void Init() {
    }
    public override void Finish() {
    if( IntIndex == null ){
      IntIndex = new List<global::Master.PbxHeader.Types.IntIndexEntry>();
    }
    if( StringIndex == null ){
      StringIndex = new List<global::Master.PbxHeader.Types.StringIndexEntry>();
    }
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CharacterTemplate : pb.Message {
    private CharacterTemplate() { }
    public static CharacterTemplate CreateInstance() { var obj = new CharacterTemplate(); obj.Finish(); return obj; }
    public static CharacterTemplate CreateEmpty() { return new CharacterTemplate(); }
    private static readonly CharacterTemplate defaultInstance = new CharacterTemplate();
    public static CharacterTemplate DefaultInstance {
      get { return defaultInstance; }
    }

    public int Id;

    public string Name = "";

    public int Image;

    public int Hp;

    public int Attack;

    public int Defense;

    #region Lite runtime methods
    #endregion

    public override void WriteTo(pb::CodedOutputStream output) {
      CalcSerializedSize();
      if (Id != 0) {
        output.WriteInt32(1, Id);
      }
      if (Name != "") {
        output.WriteString(2, Name);
      }
      if (Image != 0) {
        output.WriteInt32(3, Image);
      }
      if (Hp != 0) {
        output.WriteInt32(4, Hp);
      }
      if (Attack != 0) {
        output.WriteInt32(5, Attack);
      }
      if (Defense != 0) {
        output.WriteInt32(6, Defense);
      }
    }

    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = 0;
      if (Id != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (Name != "") {
        size += pb::CodedOutputStream.ComputeStringSize(2, Name);
      }
      if (Image != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Image);
      }
      if (Hp != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, Hp);
      }
      if (Attack != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, Attack);
      }
      if (Defense != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, Defense);
      }
      return size;
    }
    public static CharacterTemplate ParseFrom(byte[] data) {
      var mes = CreateInstance(); mes.MergeFrom(data); return mes;
    }
    public static CharacterTemplate ParseFrom(global::System.IO.Stream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public static CharacterTemplate ParseFrom(pb::CodedInputStream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public override void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 8: {
            input.ReadInt32(ref this.Id);
            break;
          }
          case 18: {
            input.ReadString(ref this.Name);
            break;
          }
          case 24: {
            input.ReadInt32(ref this.Image);
            break;
          }
          case 32: {
            input.ReadInt32(ref this.Hp);
            break;
          }
          case 40: {
            input.ReadInt32(ref this.Attack);
            break;
          }
          case 48: {
            input.ReadInt32(ref this.Defense);
            break;
          }
        }
      }
    }

    public override void Init() {
    }
    public override void Finish() {
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class StageCharacter : pb.Message {
    private StageCharacter() { }
    public static StageCharacter CreateInstance() { var obj = new StageCharacter(); obj.Finish(); return obj; }
    public static StageCharacter CreateEmpty() { return new StageCharacter(); }
    private static readonly StageCharacter defaultInstance = new StageCharacter();
    public static StageCharacter DefaultInstance {
      get { return defaultInstance; }
    }

    public int X;

    public int Y;

    public string Name = "";

    public int CharacterId;

    public int Level;

    #region Lite runtime methods
    #endregion

    public override void WriteTo(pb::CodedOutputStream output) {
      CalcSerializedSize();
      if (X != 0) {
        output.WriteInt32(1, X);
      }
      if (Y != 0) {
        output.WriteInt32(2, Y);
      }
      if (Name != "") {
        output.WriteString(3, Name);
      }
      if (CharacterId != 0) {
        output.WriteInt32(4, CharacterId);
      }
      if (Level != 0) {
        output.WriteInt32(5, Level);
      }
    }

    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = 0;
      if (X != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, X);
      }
      if (Y != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Y);
      }
      if (Name != "") {
        size += pb::CodedOutputStream.ComputeStringSize(3, Name);
      }
      if (CharacterId != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, CharacterId);
      }
      if (Level != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, Level);
      }
      return size;
    }
    public static StageCharacter ParseFrom(byte[] data) {
      var mes = CreateInstance(); mes.MergeFrom(data); return mes;
    }
    public static StageCharacter ParseFrom(global::System.IO.Stream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public static StageCharacter ParseFrom(pb::CodedInputStream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public override void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 8: {
            input.ReadInt32(ref this.X);
            break;
          }
          case 16: {
            input.ReadInt32(ref this.Y);
            break;
          }
          case 26: {
            input.ReadString(ref this.Name);
            break;
          }
          case 32: {
            input.ReadInt32(ref this.CharacterId);
            break;
          }
          case 40: {
            input.ReadInt32(ref this.Level);
            break;
          }
        }
      }
    }

    public override void Init() {
    }
    public override void Finish() {
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Stage : pb.Message {
    private Stage() { }
    public static Stage CreateInstance() { var obj = new Stage(); obj.Finish(); return obj; }
    public static Stage CreateEmpty() { return new Stage(); }
    private static readonly Stage defaultInstance = new Stage();
    public static Stage DefaultInstance {
      get { return defaultInstance; }
    }

    public int Id;

    public int Width;

    public int Height;

    public string Name = "";

    public string FieldName = "";

    public List<int> Tiles = new List<int>();

    public List<global::Master.StageCharacter> Characters;

    #region Lite runtime methods
    #endregion

    public override void WriteTo(pb::CodedOutputStream output) {
      CalcSerializedSize();
      if (Id != 0) {
        output.WriteInt32(1, Id);
      }
      if (Width != 0) {
        output.WriteInt32(2, Width);
      }
      if (Height != 0) {
        output.WriteInt32(3, Height);
      }
      if (Name != "") {
        output.WriteString(4, Name);
      }
      if (FieldName != "") {
        output.WriteString(5, FieldName);
      }
      if (Tiles.Count > 0) {
        output.WritePackedInt32Array(6, Tiles);
      }
      if (Characters != null && Characters.Count > 0) {
        output.WriteMessageArray(7, Characters);
      }
    }

    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = 0;
      if (Id != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (Width != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Width);
      }
      if (Height != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Height);
      }
      if (Name != "") {
        size += pb::CodedOutputStream.ComputeStringSize(4, Name);
      }
      if (FieldName != "") {
        size += pb::CodedOutputStream.ComputeStringSize(5, FieldName);
      }
      {
        int dataSize = 0;
        foreach (int element in Tiles) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        if (Tiles.Count != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
        }
      }
      if( Characters != null ) {
        foreach (global::Master.StageCharacter element in Characters) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, element);
        }
      }
      return size;
    }
    public static Stage ParseFrom(byte[] data) {
      var mes = CreateInstance(); mes.MergeFrom(data); return mes;
    }
    public static Stage ParseFrom(global::System.IO.Stream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public static Stage ParseFrom(pb::CodedInputStream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public override void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 8: {
            input.ReadInt32(ref this.Id);
            break;
          }
          case 16: {
            input.ReadInt32(ref this.Width);
            break;
          }
          case 24: {
            input.ReadInt32(ref this.Height);
            break;
          }
          case 34: {
            input.ReadString(ref this.Name);
            break;
          }
          case 42: {
            input.ReadString(ref this.FieldName);
            break;
          }
          case 50:
          case 48: {
            input.ReadInt32Array(tag, this.Tiles);
            break;
          }
          case 58: {
            input.ReadMessageArray(tag, this.Characters, global::Master.StageCharacter.CreateEmpty);
            break;
          }
        }
      }
    }

    public override void Init() {
    }
    public override void Finish() {
    if( Tiles == null ){
      Tiles = new List<int>();
    }
    if( Characters == null ){
      Characters = new List<global::Master.StageCharacter>();
    }
    }
  }

  #endregion

}

#endregion Designer generated code
