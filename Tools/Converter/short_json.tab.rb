#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'
module ShortJson
  class Parser < Racc::Parser
##### State transition tables begin ###

racc_action_table = [
     4,     7,     4,    18,    17,     5,     6,     5,     4,    19,
     4,    20,     6,     5,     6,     5,     6,     5,    21,    22,
    23,   -20,     8,    26,    26,    11 ]

racc_action_check = [
     8,     1,     0,     9,     8,     8,     0,     0,    19,    10,
     4,    12,    19,    19,     4,     4,    23,    23,    13,    15,
    16,    17,     3,    21,    22,     7 ]

racc_action_pointer = [
    -2,     1,   nil,    20,     6,   nil,   nil,    25,    -4,    -2,
     2,   nil,     8,    11,   nil,    12,    14,    15,   nil,     4,
   nil,    15,    16,     8,   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
   -23,   -23,    -1,    -3,   -23,   -21,   -22,   -23,    -7,   -23,
   -19,    29,   -23,    -8,    -9,   -14,   -23,   -22,    -4,   -23,
    -2,   -23,   -23,   -23,   -18,   -10,   -20,   -13,   -15 ]

racc_goto_table = [
     9,     1,     2,    14,    13,    28,    12,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    24,    25,    27 ]

racc_goto_check = [
     5,     1,     2,     8,     5,     3,     4,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     5,     8,     8 ]

racc_goto_pointer = [
   nil,     1,     2,   -18,    -2,    -4,   nil,   nil,    -5,   nil,
   nil,   nil ]

racc_goto_default = [
   nil,   nil,    10,     3,   nil,   nil,   nil,    16,   nil,   nil,
    15,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 11, :_reduce_none,
  4, 12, :_reduce_2,
  1, 12, :_reduce_none,
  3, 12, :_reduce_none,
  1, 16, :_reduce_5,
  3, 16, :_reduce_6,
  0, 14, :_reduce_7,
  1, 14, :_reduce_8,
  1, 14, :_reduce_9,
  3, 14, :_reduce_10,
  1, 19, :_reduce_none,
  0, 19, :_reduce_12,
  3, 18, :_reduce_13,
  1, 18, :_reduce_14,
  3, 20, :_reduce_15,
  1, 21, :_reduce_none,
  0, 21, :_reduce_17,
  3, 15, :_reduce_18,
  1, 15, :_reduce_19,
  1, 17, :_reduce_none,
  1, 13, :_reduce_none,
  1, 13, :_reduce_none ]

racc_reduce_n = 23

racc_shift_n = 29

racc_token_table = {
  false => 0,
  :error => 1,
  "(" => 2,
  ")" => 3,
  "[" => 4,
  "]" => 5,
  ":" => 6,
  "," => 7,
  :STRING => 8,
  :NUMBER => 9 }

racc_nt_base = 10

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"(\"",
  "\")\"",
  "\"[\"",
  "\"]\"",
  "\":\"",
  "\",\"",
  "STRING",
  "NUMBER",
  "$start",
  "program",
  "value",
  "literal",
  "args",
  "value_list",
  "value_or_kv",
  "symbol",
  "key_value_list",
  "key_value_list_p",
  "key_value",
  "value_list_p" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'short_json.y', 6)
  def _reduce_2(val, _values, result)
     result = {type: val[0]}; make_args(result, val[2]) 
    result
  end
.,.,

# reduce 3 omitted

# reduce 4 omitted

module_eval(<<'.,.,', 'short_json.y', 10)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'short_json.y', 11)
  def _reduce_6(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'short_json.y', 14)
  def _reduce_7(val, _values, result)
     result = [[], []] 
    result
  end
.,.,

module_eval(<<'.,.,', 'short_json.y', 15)
  def _reduce_8(val, _values, result)
     result = [val[0], []] 
    result
  end
.,.,

module_eval(<<'.,.,', 'short_json.y', 16)
  def _reduce_9(val, _values, result)
     result = [[], val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'short_json.y', 17)
  def _reduce_10(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

# reduce 11 omitted

module_eval(<<'.,.,', 'short_json.y', 19)
  def _reduce_12(val, _values, result)
     [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'short_json.y', 21)
  def _reduce_13(val, _values, result)
     result = [val[0]]+val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'short_json.y', 22)
  def _reduce_14(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'short_json.y', 24)
  def _reduce_15(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'short_json.y', 26)
  def _reduce_17(val, _values, result)
     [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'short_json.y', 28)
  def _reduce_18(val, _values, result)
     result = [val[0]]+val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'short_json.y', 29)
  def _reduce_19(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module ShortJson
