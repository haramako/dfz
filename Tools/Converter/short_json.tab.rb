#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'
module ShortJson
  class Parser < Racc::Parser
##### State transition tables begin ###

racc_action_table = [
     5,    12,     5,     7,     6,     7,     6,     5,   -13,     5,
     7,     6,    19,     6,     5,    20,     5,    19,     6,     7,
     6,    21,     8,     9,    10,    22,    23 ]

racc_action_check = [
    23,     8,     5,    23,    23,     5,     5,     9,    19,    10,
     9,     9,    10,    10,    22,    11,     0,    22,    22,     0,
     0,    14,     1,     3,     4,    16,    17 ]

racc_action_pointer = [
    11,    22,   nil,    21,    21,    -3,   nil,   nil,     1,     2,
     4,     9,   nil,   nil,    17,   nil,    23,    19,   nil,     1,
   nil,   nil,     9,    -5,   nil,   nil ]

racc_action_default = [
   -16,   -16,    -1,    -3,    -5,   -16,   -14,   -15,   -16,   -16,
    -7,   -16,    26,    -2,   -16,    -8,   -10,   -16,   -12,   -15,
    -6,    -4,   -16,   -16,    -9,   -11 ]

racc_goto_table = [
    18,     2,    15,     1,    14,   nil,    11,   nil,   nil,   nil,
    13,   nil,    18,    25,    24 ]

racc_goto_check = [
     3,     2,     6,     1,     5,   nil,     2,   nil,   nil,   nil,
     2,   nil,     3,     3,     6 ]

racc_goto_pointer = [
   nil,     3,     1,   -10,   nil,    -6,    -8,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,     3,     4,   nil,   nil,    16,    17 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 11, :_reduce_none,
  3, 12, :_reduce_2,
  1, 12, :_reduce_3,
  4, 13, :_reduce_4,
  1, 13, :_reduce_none,
  3, 13, :_reduce_none,
  0, 15, :_reduce_7,
  1, 15, :_reduce_none,
  3, 16, :_reduce_9,
  1, 16, :_reduce_10,
  3, 17, :_reduce_11,
  1, 17, :_reduce_12,
  1, 18, :_reduce_none,
  1, 14, :_reduce_none,
  1, 14, :_reduce_none ]

racc_reduce_n = 16

racc_shift_n = 26

racc_token_table = {
  false => 0,
  :error => 1,
  "," => 2,
  "(" => 3,
  ")" => 4,
  "[" => 5,
  "]" => 6,
  ":" => 7,
  :STRING => 8,
  :NUMBER => 9 }

racc_nt_base = 10

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\",\"",
  "\"(\"",
  "\")\"",
  "\"[\"",
  "\"]\"",
  "\":\"",
  "STRING",
  "NUMBER",
  "$start",
  "program",
  "value_list",
  "value",
  "literal",
  "args",
  "key_value_list",
  "key_value",
  "ident" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'short_json.y', 6)
  def _reduce_2(val, _values, result)
     result = val[2].unshift(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'short_json.y', 7)
  def _reduce_3(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'short_json.y', 9)
  def _reduce_4(val, _values, result)
     result = {type: val[0]}; make_args(result, val[2]) 
    result
  end
.,.,

# reduce 5 omitted

# reduce 6 omitted

module_eval(<<'.,.,', 'short_json.y', 13)
  def _reduce_7(val, _values, result)
     result = [] 
    result
  end
.,.,

# reduce 8 omitted

module_eval(<<'.,.,', 'short_json.y', 18)
  def _reduce_9(val, _values, result)
     result = [val[0]]+val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'short_json.y', 19)
  def _reduce_10(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'short_json.y', 21)
  def _reduce_11(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'short_json.y', 22)
  def _reduce_12(val, _values, result)
     result = [nil, val[0]] 
    result
  end
.,.,

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module ShortJson
